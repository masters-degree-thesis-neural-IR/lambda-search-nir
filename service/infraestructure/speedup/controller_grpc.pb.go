// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/controller.proto

package speedup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	GetsData(ctx context.Context, in *RequestDataKeyList, opts ...grpc.CallOption) (*ResponseDataValueList, error)
	GetData(ctx context.Context, in *RequestDataKey, opts ...grpc.CallOption) (*ResponseDataValue, error)
	SetData(ctx context.Context, in *RequestDataKeyValue, opts ...grpc.CallOption) (*ResponseEmpty, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) GetsData(ctx context.Context, in *RequestDataKeyList, opts ...grpc.CallOption) (*ResponseDataValueList, error) {
	out := new(ResponseDataValueList)
	err := c.cc.Invoke(ctx, "/speedup.DataService/GetsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetData(ctx context.Context, in *RequestDataKey, opts ...grpc.CallOption) (*ResponseDataValue, error) {
	out := new(ResponseDataValue)
	err := c.cc.Invoke(ctx, "/speedup.DataService/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) SetData(ctx context.Context, in *RequestDataKeyValue, opts ...grpc.CallOption) (*ResponseEmpty, error) {
	out := new(ResponseEmpty)
	err := c.cc.Invoke(ctx, "/speedup.DataService/SetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	GetsData(context.Context, *RequestDataKeyList) (*ResponseDataValueList, error)
	GetData(context.Context, *RequestDataKey) (*ResponseDataValue, error)
	SetData(context.Context, *RequestDataKeyValue) (*ResponseEmpty, error)
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) GetsData(context.Context, *RequestDataKeyList) (*ResponseDataValueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetsData not implemented")
}
func (UnimplementedDataServiceServer) GetData(context.Context, *RequestDataKey) (*ResponseDataValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedDataServiceServer) SetData(context.Context, *RequestDataKeyValue) (*ResponseEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetData not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_GetsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDataKeyList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speedup.DataService/GetsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetsData(ctx, req.(*RequestDataKeyList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDataKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speedup.DataService/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetData(ctx, req.(*RequestDataKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_SetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDataKeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).SetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speedup.DataService/SetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).SetData(ctx, req.(*RequestDataKeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "speedup.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetsData",
			Handler:    _DataService_GetsData_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _DataService_GetData_Handler,
		},
		{
			MethodName: "SetData",
			Handler:    _DataService_SetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/controller.proto",
}
